const fs = require('fs').promises;
const path = require('path');

// In-memory database for development
// In production, this would be replaced with MongoDB or PostgreSQL
let schemesDatabase = [];
let userQueries = [];

const DATA_DIR = path.join(__dirname, '../data');
const SCHEMES_FILE = path.join(DATA_DIR, 'schemes.json');
const SCRAPED_SCHEMES_FILE = path.join(DATA_DIR, 'scraped_schemes.json');
const QUERIES_FILE = path.join(DATA_DIR, 'user_queries.json');

/**
 * Initialize the database with government schemes
 */
async function initializeDatabase() {
  try {
    // Ensure data directory exists
    await fs.mkdir(DATA_DIR, { recursive: true });
    
    // Try to load scraped data first, then fallback to sample data
    try {
      const scrapedData = await fs.readFile(SCRAPED_SCHEMES_FILE, 'utf8');
      schemesDatabase = JSON.parse(scrapedData);
      console.log(`ЁЯУЪ Loaded ${schemesDatabase.length} schemes from scraped data`);
    } catch (error) {
      console.log('тЪая╕П No scraped data found, trying sample data...');
      
      try {
        const schemesData = await fs.readFile(SCHEMES_FILE, 'utf8');
        schemesDatabase = JSON.parse(schemesData);
        console.log(`ЁЯУЪ Loaded ${schemesDatabase.length} schemes from sample database`);
      } catch (sampleError) {
        console.log('ЁЯУЭ Creating sample schemes database...');
        await createSampleSchemes();
      }
    }
    
    try {
      const queriesData = await fs.readFile(QUERIES_FILE, 'utf8');
      userQueries = JSON.parse(queriesData);
    } catch (error) {
      userQueries = [];
    }
    
  } catch (error) {
    console.error('тЭМ Database initialization failed:', error);
    throw error;
  }
}

/**
 * Create sample government schemes data
 */
async function createSampleSchemes() {
  const sampleSchemes = [
    {
      id: 'pm-kisan-1',
      name: 'PM Kisan Samman Nidhi',
      nameHindi: 'рдкреАрдПрдо рдХрд┐рд╕рд╛рди рд╕рдореНрдорд╛рди рдирд┐рдзрд┐',
      nameTamil: 'рокро┐.роОроорпН. роХро┐роЪро╛ройрпН роЪроорпНрооро╛ройрпН роиро┐родро┐',
      category: 'Agriculture',
      categoryHindi: 'рдХреГрд╖рд┐',
      categoryTamil: 'ро╡ро┐ро╡роЪро╛ропроорпН',
      objective: 'To provide income support to all landholding farmers families in the country',
      objectiveHindi: 'рджреЗрд╢ рдХреЗ рд╕рднреА рднреВрдорд┐рдзрд╛рд░рдХ рдХрд┐рд╕рд╛рди рдкрд░рд┐рд╡рд╛рд░реЛрдВ рдХреЛ рдЖрдп рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рдирд╛',
      objectiveTamil: 'роиро╛роЯрпНроЯро┐ройрпН роЕройрпИродрпНродрпБ роиро┐ро▓ роЙро░ро┐роорпИропро╛ро│ро░рпН ро╡ро┐ро╡роЪро╛ропро┐ роХрпБроЯрпБроорпНрокроЩрпНроХро│рпБроХрпНроХрпБроорпН ро╡ро░рпБрооро╛рой роЖродро░ро╡рпБ ро╡ро┤роЩрпНроХ',
      eligibility: [
        'All landholding farmers families',
        'Small and marginal farmers',
        'Family should have cultivable land'
      ],
      eligibilityHindi: [
        'рд╕рднреА рднреВрдорд┐рдзрд╛рд░рдХ рдХрд┐рд╕рд╛рди рдкрд░рд┐рд╡рд╛рд░',
        'рдЫреЛрдЯреЗ рдФрд░ рд╕реАрдорд╛рдВрдд рдХрд┐рд╕рд╛рди',
        'рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рдкрд╛рд╕ рдЦреЗрддреА рдпреЛрдЧреНрдп рднреВрдорд┐ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдП'
      ],
      eligibilityTamil: [
        'роЕройрпИродрпНродрпБ роиро┐ро▓ роЙро░ро┐роорпИропро╛ро│ро░рпН ро╡ро┐ро╡роЪро╛ропро┐ роХрпБроЯрпБроорпНрокроЩрпНроХро│рпН',
        'роЪро┐ро▒ро┐роп рооро▒рпНро▒рпБроорпН ро╡ро┐ро│ро┐роорпНрокрпБ ро╡ро┐ро╡роЪро╛ропро┐роХро│рпН',
        'роХрпБроЯрпБроорпНрокродрпНродро┐ро▒рпНроХрпБ ро╡ро┐ро╡роЪро╛ропроорпН роЪрпЖропрпНропроХрпНроХрпВроЯро┐роп роиро┐ро▓роорпН роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН'
      ],
      documentsRequired: [
        'Land records',
        'Aadhaar card',
        'Bank account details',
        'Mobile number'
      ],
      documentsRequiredHindi: [
        'рднреВрдорд┐ рд░рд┐рдХреЙрд░реНрдб',
        'рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб',
        'рдмреИрдВрдХ рдЦрд╛рддрд╛ рд╡рд┐рд╡рд░рдг',
        'рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░'
      ],
      documentsRequiredTamil: [
        'роиро┐ро▓ рокродро┐ро╡рпБроХро│рпН',
        'роЖродро╛ро░рпН роЕроЯрпНроЯрпИ',
        'ро╡роЩрпНроХро┐ роХрогроХрпНроХрпБ ро╡ро┐ро╡ро░роЩрпНроХро│рпН',
        'роорпКрокрпИро▓рпН роОрогрпН'
      ],
      applicationProcedure: [
        'Visit nearest Common Service Centre (CSC)',
        'Submit required documents',
        'Fill the application form',
        'Get application receipt'
      ],
      applicationProcedureHindi: [
        'рдирд┐рдХрдЯрддрдо рдХреЙрдорди рд╕рд░реНрд╡рд┐рд╕ рд╕реЗрдВрдЯрд░ (CSC) рдкрд░ рдЬрд╛рдПрдВ',
        'рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬ рдЬрдорд╛ рдХрд░реЗрдВ',
        'рдЖрд╡реЗрджрди рдкрддреНрд░ рднрд░реЗрдВ',
        'рдЖрд╡реЗрджрди рд░рд╕реАрдж рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ'
      ],
      applicationProcedureTamil: [
        'роЕро░рпБроХро┐ро▓рпБро│рпНро│ рокрпКродрпБ роЪрпЗро╡рпИ роорпИропродрпНродро┐ро▒рпНроХрпБроЪрпН роЪрпЖро▓рпНро▓рпБроЩрпНроХро│рпН',
        'родрпЗро╡рпИропро╛рой роЖро╡рогроЩрпНроХро│рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН',
        'ро╡ро┐рогрпНрогрокрпНрок рокроЯро┐ро╡родрпНродрпИ роиро┐ро░рокрпНрокро╡рпБроорпН',
        'ро╡ро┐рогрпНрогрокрпНрок ро░роЪрпАродрпИрокрпН рокрпЖро▒ро╡рпБроорпН'
      ],
      benefits: 'тВ╣6,000 per year in three equal installments of тВ╣2,000 each',
      benefitsHindi: 'рдкреНрд░рддрд┐ рд╡рд░реНрд╖ тВ╣6,000 рддреАрди рд╕рдорд╛рди рдХрд┐рд╕реНрддреЛрдВ рдореЗрдВ тВ╣2,000 рдкреНрд░рддреНрдпреЗрдХ',
      benefitsTamil: 'роЖрогрпНроЯрпБроХрпНроХрпБ тВ╣6,000 роорпВройрпНро▒рпБ роЪроорооро╛рой родро╡рогрпИроХро│ро┐ро▓рпН тВ╣2,000 роТро╡рпНро╡рпКройрпНро▒рпБроорпН',
      deadline: 'Ongoing',
      deadlineHindi: 'рдЪрд▓ рд░рд╣рд╛ рд╣реИ',
      deadlineTamil: 'роироЯроирпНродрпБ роХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒родрпБ',
      contactInfo: 'PM-KISAN Helpline: 1800-180-1551',
      contactInfoHindi: 'рдкреАрдПрдо-рдХрд┐рд╕рд╛рди рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1800-180-1551',
      contactInfoTamil: 'рокро┐.роОроорпН.-роХро┐роЪро╛ройрпН роЙродро╡ро┐ ро╡ро░ро┐: 1800-180-1551',
      website: 'https://pmkisan.gov.in',
      lastUpdated: new Date().toISOString(),
      tags: ['agriculture', 'farmer', 'income support', 'pm kisan']
    },
    {
      id: 'mgnrega-2',
      name: 'Mahatma Gandhi National Rural Employment Guarantee Act',
      nameHindi: 'рдорд╣рд╛рддреНрдорд╛ рдЧрд╛рдВрдзреА рд░рд╛рд╖реНрдЯреНрд░реАрдп рдЧреНрд░рд╛рдореАрдг рд░реЛрдЬрдЧрд╛рд░ рдЧрд╛рд░рдВрдЯреА рдЕрдзрд┐рдирд┐рдпрдо',
      nameTamil: 'роороХро╛родрпНрооро╛ роХро╛роирпНродро┐ родрпЗроЪро┐роп роХро┐ро░ро╛роорокрпНрокрпБро▒ ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ роЙродрпНродро░ро╡ро╛род роЪроЯрпНроЯроорпН',
      category: 'Employment',
      categoryHindi: 'рд░реЛрдЬрдЧрд╛рд░',
      categoryTamil: 'ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ',
      objective: 'To provide at least 100 days of guaranteed wage employment in a financial year to every rural household',
      objectiveHindi: 'рдкреНрд░рддреНрдпреЗрдХ рдЧреНрд░рд╛рдореАрдг рдкрд░рд┐рд╡рд╛рд░ рдХреЛ рдПрдХ рд╡рд┐рддреНрддреАрдп рд╡рд░реНрд╖ рдореЗрдВ рдХрдо рд╕реЗ рдХрдо 100 рджрд┐рдиреЛрдВ рдХреА рдЧрд╛рд░рдВрдЯреАрдХреГрдд рдордЬрджреВрд░реА рд░реЛрдЬрдЧрд╛рд░ рдкреНрд░рджрд╛рди рдХрд░рдирд╛',
      objectiveTamil: 'роТро╡рпНро╡рпКро░рпБ роХро┐ро░ро╛роорокрпНрокрпБро▒ роХрпБроЯрпБроорпНрокродрпНродро┐ро▒рпНроХрпБроорпН роТро░рпБ роиро┐родро┐ропро╛рогрпНроЯро┐ро▓рпН роХрпБро▒рпИроирпНродродрпБ 100 роиро╛роЯрпНроХро│рпН роЙродрпНродро░ро╡ро╛род роКродро┐роп ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ ро╡ро┤роЩрпНроХ',
      eligibility: [
        'Adult members of rural households',
        'Willing to do unskilled manual work',
        'Should be registered in the job card'
      ],
      eligibilityHindi: [
        'рдЧреНрд░рд╛рдореАрдг рдкрд░рд┐рд╡рд╛рд░реЛрдВ рдХреЗ рд╡рдпрд╕реНрдХ рд╕рджрд╕реНрдп',
        'рдЕрдХреБрд╢рд▓ рд╢рд╛рд░реАрд░рд┐рдХ рдХрд╛рд░реНрдп рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░',
        'рдЬреЙрдм рдХрд╛рд░реНрдб рдореЗрдВ рдкрдВрдЬреАрдХреГрдд рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП'
      ],
      eligibilityTamil: [
        'роХро┐ро░ро╛роорокрпНрокрпБро▒ роХрпБроЯрпБроорпНрокроЩрпНроХро│ро┐ройрпН ро╡ропродрпБ ро╡роирпНрод роЙро▒рпБрокрпНрокро┐ройро░рпНроХро│рпН',
        'родро┐ро▒роорпИропро▒рпНро▒ роХрпИро╡ро┐ройрпИ ро╡рпЗро▓рпИ роЪрпЖропрпНроп родропро╛ро░ро╛роХ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН',
        'ро╡рпЗро▓рпИ роЕроЯрпНроЯрпИропро┐ро▓рпН рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯро┐ро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН'
      ],
      documentsRequired: [
        'Job card',
        'Aadhaar card',
        'Bank account details'
      ],
      documentsRequiredHindi: [
        'рдЬреЙрдм рдХрд╛рд░реНрдб',
        'рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб',
        'рдмреИрдВрдХ рдЦрд╛рддрд╛ рд╡рд┐рд╡рд░рдг'
      ],
      documentsRequiredTamil: [
        'ро╡рпЗро▓рпИ роЕроЯрпНроЯрпИ',
        'роЖродро╛ро░рпН роЕроЯрпНроЯрпИ',
        'ро╡роЩрпНроХро┐ роХрогроХрпНроХрпБ ро╡ро┐ро╡ро░роЩрпНроХро│рпН'
      ],
      applicationProcedure: [
        'Apply for job card at Gram Panchayat',
        'Submit required documents',
        'Get job card issued',
        'Demand work from Gram Panchayat'
      ],
      applicationProcedureHindi: [
        'рдЧреНрд░рд╛рдо рдкрдВрдЪрд╛рдпрдд рдореЗрдВ рдЬреЙрдм рдХрд╛рд░реНрдб рдХреЗ рд▓рд┐рдП рдЖрд╡реЗрджрди рдХрд░реЗрдВ',
        'рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬ рдЬрдорд╛ рдХрд░реЗрдВ',
        'рдЬреЙрдм рдХрд╛рд░реНрдб рдЬрд╛рд░реА рдХрд░рд╛рдПрдВ',
        'рдЧреНрд░рд╛рдо рдкрдВрдЪрд╛рдпрдд рд╕реЗ рдХрд╛рдо рдХреА рдорд╛рдВрдЧ рдХрд░реЗрдВ'
      ],
      applicationProcedureTamil: [
        'роХро┐ро░ро╛роо рокроЮрпНроЪро╛ропродрпНродро┐ро▓рпН ро╡рпЗро▓рпИ роЕроЯрпНроЯрпИроХрпНроХрпБ ро╡ро┐рогрпНрогрокрпНрокро┐роХрпНроХро╡рпБроорпН',
        'родрпЗро╡рпИропро╛рой роЖро╡рогроЩрпНроХро│рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН',
        'ро╡рпЗро▓рпИ роЕроЯрпНроЯрпИ ро╡ро┤роЩрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ',
        'роХро┐ро░ро╛роо рокроЮрпНроЪро╛ропродрпНродро┐роЯрооро┐ро░рпБроирпНродрпБ ро╡рпЗро▓рпИ роХрпЛро░ро╡рпБроорпН'
      ],
      benefits: 'Minimum wage as per state rates (тВ╣200-тВ╣350 per day)',
      benefitsHindi: 'рд░рд╛рдЬреНрдп рджрд░реЛрдВ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдиреНрдпреВрдирддрдо рдордЬрджреВрд░реА (тВ╣200-тВ╣350 рдкреНрд░рддрд┐ рджрд┐рди)',
      benefitsTamil: 'рооро╛роиро┐ро▓ ро╡ро┐роХро┐родроЩрпНроХро│ро┐ройрпНрокроЯро┐ роХрпБро▒рпИроирпНродрокроЯрпНроЪ роКродро┐ропроорпН (тВ╣200-тВ╣350 роТро░рпБ роиро╛ро│рпБроХрпНроХрпБ)',
      deadline: 'Ongoing',
      deadlineHindi: 'рдЪрд▓ рд░рд╣рд╛ рд╣реИ',
      deadlineTamil: 'роироЯроирпНродрпБ роХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒родрпБ',
      contactInfo: 'MGNREGA Helpline: 1800-345-3240',
      contactInfoHindi: 'рдордирд░реЗрдЧрд╛ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1800-345-3240',
      contactInfoTamil: 'рооройрпНро░рпЗроХро╛ роЙродро╡ро┐ ро╡ро░ро┐: 1800-345-3240',
      website: 'https://nrega.nic.in',
      lastUpdated: new Date().toISOString(),
      tags: ['employment', 'rural', 'mgnrega', 'job guarantee']
    },
    {
      id: 'pradhan-mantri-awas-yojana-3',
      name: 'Pradhan Mantri Awas Yojana (PMAY)',
      nameHindi: 'рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдЖрд╡рд╛рд╕ рдпреЛрдЬрдирд╛',
      nameTamil: 'рокро┐ро░родрооро░рпН роЕро╡ро╛ро╕рпН ропрпЛроЬройро╛',
      category: 'Housing',
      categoryHindi: 'рдЖрд╡рд╛рд╕',
      categoryTamil: 'ро╡рпАроЯрпБ',
      objective: 'To provide affordable housing to the urban and rural poor',
      objectiveHindi: 'рд╢рд╣рд░реА рдФрд░ рдЧреНрд░рд╛рдореАрдг рдЧрд░реАрдмреЛрдВ рдХреЛ рдХрд┐рдлрд╛рдпрддреА рдЖрд╡рд╛рд╕ рдкреНрд░рджрд╛рди рдХрд░рдирд╛',
      objectiveTamil: 'роироХро░рпНрокрпНрокрпБро▒ рооро▒рпНро▒рпБроорпН роХро┐ро░ро╛роорокрпНрокрпБро▒ роПро┤рпИроХро│рпБроХрпНроХрпБ рооро▓ро┐ро╡рпБ ро╡рпАроЯрпБ ро╡ро┤роЩрпНроХ',
      eligibility: [
        'Economically Weaker Section (EWS)',
        'Lower Income Group (LIG)',
        'Middle Income Group (MIG)',
        'Beneficiary should not own a pucca house'
      ],
      eligibilityHindi: [
        'рдЖрд░реНрдерд┐рдХ рд░реВрдк рд╕реЗ рдХрдордЬреЛрд░ рд╡рд░реНрдЧ (EWS)',
        'рдирд┐рдореНрди рдЖрдп рд╕рдореВрд╣ (LIG)',
        'рдордзреНрдпрдо рдЖрдп рд╕рдореВрд╣ (MIG)',
        'рд▓рд╛рднрд╛рд░реНрдереА рдХреЗ рдкрд╛рд╕ рдкрдХреНрдХрд╛ рдордХрд╛рди рдирд╣реАрдВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП'
      ],
      eligibilityTamil: [
        'рокрпКро░рпБро│ро╛родро╛ро░ ро░рпАродро┐ропро╛роХ рокро▓ро╡рпАройрооро╛рой рокро┐ро░ро┐ро╡рпБ (EWS)',
        'роХрпБро▒рпИроирпНрод ро╡ро░рпБрооро╛рой роХрпБро┤рпБ (LIG)',
        'роироЯрпБродрпНродро░ ро╡ро░рпБрооро╛рой роХрпБро┤рпБ (MIG)',
        'рокропройро╛ро│ро┐роХрпНроХрпБ роХрпЖроЯрпНроЯро┐ ро╡рпАроЯрпБ роЗро░рпБроХрпНроХроХрпНроХрпВроЯро╛родрпБ'
      ],
      documentsRequired: [
        'Aadhaar card',
        'Income certificate',
        'Caste certificate (if applicable)',
        'Bank account details',
        'Land documents'
      ],
      documentsRequiredHindi: [
        'рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб',
        'рдЖрдп рдкреНрд░рдорд╛рдг рдкрддреНрд░',
        'рдЬрд╛рддрд┐ рдкреНрд░рдорд╛рдг рдкрддреНрд░ (рдпрджрд┐ рд▓рд╛рдЧреВ рд╣реЛ)',
        'рдмреИрдВрдХ рдЦрд╛рддрд╛ рд╡рд┐рд╡рд░рдг',
        'рднреВрдорд┐ рджрд╕реНрддрд╛рд╡реЗрдЬ'
      ],
      documentsRequiredTamil: [
        'роЖродро╛ро░рпН роЕроЯрпНроЯрпИ',
        'ро╡ро░рпБрооро╛рой роЪро╛ройрпНро▒ро┐родро┤рпН',
        'роЪро╛родро┐ роЪро╛ройрпНро▒ро┐родро┤рпН (рокрпКро░рпБроирпНродро┐ройро╛ро▓рпН)',
        'ро╡роЩрпНроХро┐ роХрогроХрпНроХрпБ ро╡ро┐ро╡ро░роЩрпНроХро│рпН',
        'роиро┐ро▓ роЖро╡рогроЩрпНроХро│рпН'
      ],
      applicationProcedure: [
        'Visit nearest CSC or Municipal Corporation',
        'Submit application with required documents',
        'Get application number',
        'Wait for approval and sanction'
      ],
      applicationProcedureHindi: [
        'рдирд┐рдХрдЯрддрдо CSC рдпрд╛ рдирдЧрд░ рдирд┐рдЧрдо рдкрд░ рдЬрд╛рдПрдВ',
        'рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬреЛрдВ рдХреЗ рд╕рд╛рде рдЖрд╡реЗрджрди рдЬрдорд╛ рдХрд░реЗрдВ',
        'рдЖрд╡реЗрджрди рд╕рдВрдЦреНрдпрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
        'рдЕрдиреБрдореЛрджрди рдФрд░ рд╕реНрд╡реАрдХреГрддрд┐ рдХреА рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ'
      ],
      applicationProcedureTamil: [
        'роЕро░рпБроХро┐ро▓рпБро│рпНро│ CSC роЕро▓рпНро▓родрпБ рооро╛роироХро░ро╛роЯрпНроЪро┐роХрпНроХрпБроЪрпН роЪрпЖро▓рпНро▓рпБроЩрпНроХро│рпН',
        'родрпЗро╡рпИропро╛рой роЖро╡рогроЩрпНроХро│рпБроЯройрпН ро╡ро┐рогрпНрогрокрпНрокродрпНродрпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН',
        'ро╡ро┐рогрпНрогрокрпНрок роОрогрпНрогрпИрокрпН рокрпЖро▒ро╡рпБроорпН',
        'роЕройрпБроородро┐ рооро▒рпНро▒рпБроорпН роТрокрпНрокрпБродро▓рпБроХрпНроХро╛роХ роХро╛родрпНродро┐ро░рпБроХрпНроХро╡рпБроорпН'
      ],
      benefits: 'Up to тВ╣2.5 lakh for EWS/LIG and тВ╣6 lakh for MIG',
      benefitsHindi: 'EWS/LIG рдХреЗ рд▓рд┐рдП тВ╣2.5 рд▓рд╛рдЦ рддрдХ рдФрд░ MIG рдХреЗ рд▓рд┐рдП тВ╣6 рд▓рд╛рдЦ рддрдХ',
      benefitsTamil: 'EWS/LIG роХрпНроХрпБ тВ╣2.5 ро▓роЯрпНроЪроорпН ро╡ро░рпИ рооро▒рпНро▒рпБроорпН MIG роХрпНроХрпБ тВ╣6 ро▓роЯрпНроЪроорпН ро╡ро░рпИ',
      deadline: 'March 2024',
      deadlineHindi: 'рдорд╛рд░реНрдЪ 2024',
      deadlineTamil: 'рооро╛ро░рпНроЪрпН 2024',
      contactInfo: 'PMAY Helpline: 1800-11-6163',
      contactInfoHindi: 'рдкреАрдПрдордПрд╡рд╛рдИ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1800-11-6163',
      contactInfoTamil: 'рокро┐.роОроорпН.роП.ро╡рпИ роЙродро╡ро┐ ро╡ро░ро┐: 1800-11-6163',
      website: 'https://pmaymis.gov.in',
      lastUpdated: new Date().toISOString(),
      tags: ['housing', 'pmay', 'affordable housing', 'urban', 'rural']
    }
  ];
  
  schemesDatabase = sampleSchemes;
  await saveSchemesToFile();
  console.log(`тЬЕ Created ${schemesDatabase.length} sample schemes`);
}

/**
 * Save schemes to file
 */
async function saveSchemesToFile() {
  try {
    await fs.writeFile(SCHEMES_FILE, JSON.stringify(schemesDatabase, null, 2));
  } catch (error) {
    console.error('тЭМ Failed to save schemes to file:', error);
  }
}

/**
 * Save user queries to file
 */
async function saveQueriesToFile() {
  try {
    await fs.writeFile(QUERIES_FILE, JSON.stringify(userQueries, null, 2));
  } catch (error) {
    console.error('тЭМ Failed to save queries to file:', error);
  }
}

/**
 * Get all schemes
 */
function getAllSchemes() {
  return schemesDatabase;
}

/**
 * Get scheme by ID
 */
function getSchemeById(id) {
  return schemesDatabase.find(scheme => scheme.id === id);
}

/**
 * Search schemes by query
 */
function searchSchemes(query, language = 'en') {
  const searchTerm = query.toLowerCase();
  
  return schemesDatabase.filter(scheme => {
    const nameField = language === 'hi' ? 'nameHindi' : language === 'ta' ? 'nameTamil' : 'name';
    const objectiveField = language === 'hi' ? 'objectiveHindi' : language === 'ta' ? 'objectiveTamil' : 'objective';
    const categoryField = language === 'hi' ? 'categoryHindi' : language === 'ta' ? 'categoryTamil' : 'category';
    
    return (
      scheme[nameField]?.toLowerCase().includes(searchTerm) ||
      scheme[objectiveField]?.toLowerCase().includes(searchTerm) ||
      scheme[categoryField]?.toLowerCase().includes(searchTerm) ||
      scheme.tags?.some(tag => tag.toLowerCase().includes(searchTerm))
    );
  });
}

/**
 * Get schemes by category
 */
function getSchemesByCategory(category, language = 'en') {
  const categoryField = language === 'hi' ? 'categoryHindi' : language === 'ta' ? 'categoryTamil' : 'category';
  return schemesDatabase.filter(scheme => 
    scheme[categoryField]?.toLowerCase() === category.toLowerCase()
  );
}

/**
 * Add user query
 */
async function addUserQuery(query, response, language = 'en') {
  const userQuery = {
    id: Date.now().toString(),
    query,
    response,
    language,
    timestamp: new Date().toISOString()
  };
  
  userQueries.push(userQuery);
  await saveQueriesToFile();
  return userQuery;
}

/**
 * Get user queries
 */
function getUserQueries(limit = 50) {
  return userQueries
    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
    .slice(0, limit);
}

module.exports = {
  initializeDatabase,
  getAllSchemes,
  getSchemeById,
  searchSchemes,
  getSchemesByCategory,
  addUserQuery,
  getUserQueries
};
