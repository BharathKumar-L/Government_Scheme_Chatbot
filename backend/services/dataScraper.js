const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs').promises;
const path = require('path');

class GovernmentDataScraper {
  constructor() {
    this.dataSources = {
      myscheme: {
        baseUrl: 'https://www.myscheme.gov.in',
        schemesEndpoint: '/api/schemes',
        detailsEndpoint: '/api/scheme-details'
      },
      nsp: {
        baseUrl: 'https://nsp.gov.in',
        schemesEndpoint: '/api/schemes',
        detailsEndpoint: '/api/scheme-details'
      },
      pmkisan: {
        baseUrl: 'https://pmkisan.gov.in',
        schemesEndpoint: '/api/schemes',
        detailsEndpoint: '/api/scheme-details'
      }
    };
    
    this.scrapedData = [];
    this.dataDir = path.join(__dirname, '../data');
  }

  /**
   * Main method to fetch all government scheme data
   */
  async fetchAllSchemeData() {
    console.log('ЁЯФД Starting government scheme data fetching...');
    
    try {
      // Fetch from multiple sources
      const myschemeData = await this.fetchMySchemeData();
      const nspData = await this.fetchNSPData();
      const pmkisanData = await this.fetchPMKisanData();
      
      // Combine all data
      const allSchemes = [
        ...myschemeData,
        ...nspData,
        ...pmkisanData
      ];
      
      // Remove duplicates and clean data
      const cleanedData = this.cleanAndDeduplicateData(allSchemes);
      
      // Save to file
      await this.saveDataToFile(cleanedData);
      
      console.log(`тЬЕ Successfully fetched ${cleanedData.length} government schemes`);
      return cleanedData;
      
    } catch (error) {
      console.error('тЭМ Error fetching government scheme data:', error);
      throw error;
    }
  }

  /**
   * Fetch data from MyScheme.gov.in
   */
  async fetchMySchemeData() {
    try {
      console.log('ЁЯУб Fetching data from MyScheme.gov.in...');
      
      // Try API first
      try {
        const response = await axios.get(`${this.dataSources.myscheme.baseUrl}/api/schemes`, {
          timeout: 10000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });
        
        if (response.data && response.data.schemes) {
          return this.processMySchemeAPIResponse(response.data.schemes);
        }
      } catch (apiError) {
        console.log('тЪая╕П MyScheme API not available, trying web scraping...');
      }
      
      // Fallback to web scraping
      return await this.scrapeMySchemeWebsite();
      
    } catch (error) {
      console.error('тЭМ Error fetching MyScheme data:', error);
      return [];
    }
  }

  /**
   * Scrape MyScheme website
   */
  async scrapeMySchemeWebsite() {
    try {
      const response = await axios.get(`${this.dataSources.myscheme.baseUrl}/schemes`, {
        timeout: 15000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      const $ = cheerio.load(response.data);
      const schemes = [];
      
      // Extract scheme information from HTML
      $('.scheme-card, .scheme-item').each((index, element) => {
        const $el = $(element);
        
        const scheme = {
          id: `myscheme-${index}`,
          name: $el.find('.scheme-title, h3, h4').first().text().trim(),
          category: $el.find('.scheme-category, .category').text().trim(),
          objective: $el.find('.scheme-description, .description').text().trim(),
          eligibility: this.extractEligibility($el),
          benefits: $el.find('.benefits, .scheme-benefits').text().trim(),
          contactInfo: $el.find('.contact, .helpline').text().trim(),
          website: this.dataSources.myscheme.baseUrl,
          source: 'MyScheme.gov.in',
          lastUpdated: new Date().toISOString()
        };
        
        if (scheme.name) {
          schemes.push(scheme);
        }
      });
      
      return schemes;
    } catch (error) {
      console.error('тЭМ Error scraping MyScheme website:', error);
      return [];
    }
  }

  /**
   * Fetch data from NSP (National Scholarship Portal)
   */
  async fetchNSPData() {
    try {
      console.log('ЁЯУб Fetching data from NSP...');
      
      // NSP specific schemes
      const nspSchemes = [
        {
          id: 'nsp-merit-scholarship',
          name: 'Merit Scholarship Scheme',
          nameHindi: 'рдореЗрд░рд┐рдЯ рдЫрд╛рддреНрд░рд╡реГрддреНрддрд┐ рдпреЛрдЬрдирд╛',
          nameTamil: 'роорпЖро░ро┐роЯрпН роЙродро╡ро┐родрпНродрпКроХрпИ родро┐роЯрпНроЯроорпН',
          category: 'Education',
          categoryHindi: 'рд╢рд┐рдХреНрд╖рд╛',
          categoryTamil: 'роХро▓рпНро╡ро┐',
          objective: 'To provide financial assistance to meritorious students from economically weaker sections',
          objectiveHindi: 'рдЖрд░реНрдерд┐рдХ рд░реВрдк рд╕реЗ рдХрдордЬреЛрд░ рд╡рд░реНрдЧ рдХреЗ рдореЗрдзрд╛рд╡реА рдЫрд╛рддреНрд░реЛрдВ рдХреЛ рд╡рд┐рддреНрддреАрдп рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рдирд╛',
          objectiveTamil: 'рокрпКро░рпБро│ро╛родро╛ро░ ро░рпАродро┐ропро╛роХ рокро▓ро╡рпАройрооро╛рой рокро┐ро░ро┐ро╡ро┐ройрпН роорпЗродрпИропро╛рой рооро╛рогро╡ро░рпНроХро│рпБроХрпНроХрпБ роиро┐родро┐ роЙродро╡ро┐ ро╡ро┤роЩрпНроХ',
          eligibility: [
            'Students from economically weaker sections',
            'Minimum 50% marks in previous examination',
            'Family income less than тВ╣2.5 lakh per annum'
          ],
          eligibilityHindi: [
            'рдЖрд░реНрдерд┐рдХ рд░реВрдк рд╕реЗ рдХрдордЬреЛрд░ рд╡рд░реНрдЧ рдХреЗ рдЫрд╛рддреНрд░',
            'рдкрд┐рдЫрд▓реА рдкрд░реАрдХреНрд╖рд╛ рдореЗрдВ рдиреНрдпреВрдирддрдо 50% рдЕрдВрдХ',
            'рдкрд╛рд░рд┐рд╡рд╛рд░рд┐рдХ рдЖрдп тВ╣2.5 рд▓рд╛рдЦ рдкреНрд░рддрд┐ рд╡рд░реНрд╖ рд╕реЗ рдХрдо'
          ],
          eligibilityTamil: [
            'рокрпКро░рпБро│ро╛родро╛ро░ ро░рпАродро┐ропро╛роХ рокро▓ро╡рпАройрооро╛рой рокро┐ро░ро┐ро╡ро┐ройрпН рооро╛рогро╡ро░рпНроХро│рпН',
            'роорпБроирпНродрпИроп родрпЗро░рпНро╡ро┐ро▓рпН роХрпБро▒рпИроирпНродродрпБ 50% роородро┐рокрпНрокрпЖрогрпНроХро│рпН',
            'роХрпБроЯрпБроорпНрок ро╡ро░рпБрооро╛ройроорпН роЖрогрпНроЯрпБроХрпНроХрпБ тВ╣2.5 ро▓роЯрпНроЪродрпНродро┐ро▒рпНроХрпБ роХрпБро▒рпИро╡рпБ'
          ],
          benefits: 'тВ╣10,000 to тВ╣20,000 per annum based on course',
          benefitsHindi: 'рдХреЛрд░реНрд╕ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдкреНрд░рддрд┐ рд╡рд░реНрд╖ тВ╣10,000 рд╕реЗ тВ╣20,000',
          benefitsTamil: 'рокро╛роЯродрпНродро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН роЖрогрпНроЯрпБроХрпНроХрпБ тВ╣10,000 роорпБродро▓рпН тВ╣20,000 ро╡ро░рпИ',
          contactInfo: 'NSP Helpline: 0120-6619540',
          contactInfoHindi: 'рдПрдирдПрд╕рдкреА рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 0120-6619540',
          contactInfoTamil: 'роОройрпН.роОро╕рпН.рокро┐ роЙродро╡ро┐ ро╡ро░ро┐: 0120-6619540',
          website: 'https://scholarships.gov.in',
          source: 'NSP',
          lastUpdated: new Date().toISOString(),
          tags: ['education', 'scholarship', 'merit', 'nsp']
        }
      ];
      
      return nspSchemes;
    } catch (error) {
      console.error('тЭМ Error fetching NSP data:', error);
      return [];
    }
  }

  /**
   * Fetch data from PM Kisan portal
   */
  async fetchPMKisanData() {
    try {
      console.log('ЁЯУб Fetching data from PM Kisan...');
      
      // PM Kisan specific data
      const pmkisanSchemes = [
        {
          id: 'pm-kisan-samman-nidhi',
          name: 'PM Kisan Samman Nidhi',
          nameHindi: 'рдкреАрдПрдо рдХрд┐рд╕рд╛рди рд╕рдореНрдорд╛рди рдирд┐рдзрд┐',
          nameTamil: 'рокро┐.роОроорпН. рдХрд┐рд╕рд╛рди рд╕рдореНрдорд╛рди рдирд┐рдзрд┐',
          category: 'Agriculture',
          categoryHindi: 'рдХреГрд╖рд┐',
          categoryTamil: 'ро╡ро┐ро╡роЪро╛ропроорпН',
          objective: 'To provide income support to all landholding farmers families in the country',
          objectiveHindi: 'рджреЗрд╢ рдХреЗ рд╕рднреА рднреВрдорд┐рдзрд╛рд░рдХ рдХрд┐рд╕рд╛рди рдкрд░рд┐рд╡рд╛рд░реЛрдВ рдХреЛ рдЖрдп рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рдирд╛',
          objectiveTamil: 'роиро╛роЯрпНроЯро┐ройрпН роЕройрпИродрпНродрпБ роиро┐ро▓ роЙро░ро┐роорпИропро╛ро│ро░рпН ро╡ро┐ро╡роЪро╛ропро┐ роХрпБроЯрпБроорпНрокроЩрпНроХро│рпБроХрпНроХрпБроорпН ро╡ро░рпБрооро╛рой роЖродро░ро╡рпБ ро╡ро┤роЩрпНроХ',
          eligibility: [
            'All landholding farmers families',
            'Small and marginal farmers',
            'Family should have cultivable land'
          ],
          eligibilityHindi: [
            'рд╕рднреА рднреВрдорд┐рдзрд╛рд░рдХ рдХрд┐рд╕рд╛рди рдкрд░рд┐рд╡рд╛рд░',
            'рдЫреЛрдЯреЗ рдФрд░ рд╕реАрдорд╛рдВрдд рдХрд┐рд╕рд╛рди',
            'рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рдкрд╛рд╕ рдЦреЗрддреА рдпреЛрдЧреНрдп рднреВрдорд┐ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдП'
          ],
          eligibilityTamil: [
            'роЕройрпИродрпНродрпБ роиро┐ро▓ роЙро░ро┐роорпИропро╛ро│ро░рпН ро╡ро┐ро╡роЪро╛ропро┐ роХрпБроЯрпБроорпНрокроЩрпНроХро│рпН',
            'роЪро┐ро▒ро┐роп рооро▒рпНро▒рпБроорпН ро╡ро┐ро│ро┐роорпНрокрпБ ро╡ро┐ро╡роЪро╛ропро┐роХро│рпН',
            'роХрпБроЯрпБроорпНрокродрпНродро┐ро▒рпНроХрпБ ро╡ро┐ро╡роЪро╛ропроорпН роЪрпЖропрпНропроХрпНроХрпВроЯро┐роп роиро┐ро▓роорпН роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН'
          ],
          documentsRequired: [
            'Land records',
            'Aadhaar card',
            'Bank account details',
            'Mobile number'
          ],
          documentsRequiredHindi: [
            'рднреВрдорд┐ рд░рд┐рдХреЙрд░реНрдб',
            'рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб',
            'рдмреИрдВрдХ рдЦрд╛рддрд╛ рд╡рд┐рд╡рд░рдг',
            'рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░'
          ],
          documentsRequiredTamil: [
            'роиро┐ро▓ рокродро┐ро╡рпБроХро│рпН',
            'роЖродро╛ро░рпН роЕроЯрпНроЯрпИ',
            'ро╡роЩрпНроХро┐ роХрогроХрпНроХрпБ ро╡ро┐ро╡ро░роЩрпНроХро│рпН',
            'роорпКрокрпИро▓рпН роОрогрпН'
          ],
          applicationProcedure: [
            'Visit nearest Common Service Centre (CSC)',
            'Submit required documents',
            'Fill the application form',
            'Get application receipt'
          ],
          applicationProcedureHindi: [
            'рдирд┐рдХрдЯрддрдо рдХреЙрдорди рд╕рд░реНрд╡рд┐рд╕ рд╕реЗрдВрдЯрд░ (CSC) рдкрд░ рдЬрд╛рдПрдВ',
            'рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬ рдЬрдорд╛ рдХрд░реЗрдВ',
            'рдЖрд╡реЗрджрди рдкрддреНрд░ рднрд░реЗрдВ',
            'рдЖрд╡реЗрджрди рд░рд╕реАрдж рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ'
          ],
          applicationProcedureTamil: [
            'роЕро░рпБроХро┐ро▓рпБро│рпНро│ рокрпКродрпБ роЪрпЗро╡рпИ роорпИропродрпНродро┐ро▒рпНроХрпБроЪрпН роЪрпЖро▓рпНро▓рпБроЩрпНроХро│рпН',
            'родрпЗро╡рпИропро╛рой роЖро╡рогроЩрпНроХро│рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН',
            'ро╡ро┐рогрпНрогрокрпНрок рокроЯро┐ро╡родрпНродрпИ роиро┐ро░рокрпНрокро╡рпБроорпН',
            'ро╡ро┐рогрпНрогрокрпНрок ро░роЪрпАродрпИрокрпН рокрпЖро▒ро╡рпБроорпН'
          ],
          benefits: 'тВ╣6,000 per year in three equal installments of тВ╣2,000 each',
          benefitsHindi: 'рдкреНрд░рддрд┐ рд╡рд░реНрд╖ тВ╣6,000 рддреАрди рд╕рдорд╛рди рдХрд┐рд╕реНрддреЛрдВ рдореЗрдВ тВ╣2,000 рдкреНрд░рддреНрдпреЗрдХ',
          benefitsTamil: 'роЖрогрпНроЯрпБроХрпНроХрпБ тВ╣6,000 роорпВройрпНро▒рпБ роЪроорооро╛рой родро╡рогрпИроХро│ро┐ро▓рпН тВ╣2,000 роТро╡рпНро╡рпКройрпНро▒рпБроорпН',
          deadline: 'Ongoing',
          deadlineHindi: 'рдЪрд▓ рд░рд╣рд╛ рд╣реИ',
          deadlineTamil: 'роироЯроирпНродрпБ роХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒родрпБ',
          contactInfo: 'PM-KISAN Helpline: 1800-180-1551',
          contactInfoHindi: 'рдкреАрдПрдо-рдХрд┐рд╕рд╛рди рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1800-180-1551',
          contactInfoTamil: 'рокро┐.роОроорпН.-рдХрд┐рд╕рд╛рди рдЙрддрд╛рд╡реА рд╡рд░рд┐: 1800-180-1551',
          website: 'https://pmkisan.gov.in',
          source: 'PM Kisan',
          lastUpdated: new Date().toISOString(),
          tags: ['agriculture', 'farmer', 'income support', 'pm kisan']
        }
      ];
      
      return pmkisanSchemes;
    } catch (error) {
      console.error('тЭМ Error fetching PM Kisan data:', error);
      return [];
    }
  }

  /**
   * Extract eligibility information from HTML element
   */
  extractEligibility($element) {
    const eligibility = [];
    
    $element.find('.eligibility li, .eligibility-item').each((index, el) => {
      const text = $(el).text().trim();
      if (text) {
        eligibility.push(text);
      }
    });
    
    return eligibility;
  }

  /**
   * Process MyScheme API response
   */
  processMySchemeAPIResponse(schemes) {
    return schemes.map((scheme, index) => ({
      id: `myscheme-api-${index}`,
      name: scheme.schemeName || scheme.name,
      category: scheme.category || 'General',
      objective: scheme.description || scheme.objective,
      eligibility: scheme.eligibility || [],
      benefits: scheme.benefits || '',
      contactInfo: scheme.contactInfo || '',
      website: scheme.website || this.dataSources.myscheme.baseUrl,
      source: 'MyScheme.gov.in (API)',
      lastUpdated: new Date().toISOString(),
      tags: scheme.tags || []
    }));
  }

  /**
   * Clean and deduplicate data
   */
  cleanAndDeduplicateData(schemes) {
    const seen = new Set();
    const cleaned = [];
    
    schemes.forEach(scheme => {
      // Create a unique key based on name and category
      const key = `${scheme.name.toLowerCase()}-${scheme.category.toLowerCase()}`;
      
      if (!seen.has(key) && scheme.name && scheme.name.trim()) {
        seen.add(key);
        
        // Clean and standardize the scheme data
        const cleanedScheme = {
          id: scheme.id || `scheme-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          name: scheme.name.trim(),
          nameHindi: scheme.nameHindi || '',
          nameTamil: scheme.nameTamil || '',
          category: scheme.category || 'General',
          categoryHindi: scheme.categoryHindi || '',
          categoryTamil: scheme.categoryTamil || '',
          objective: scheme.objective || '',
          objectiveHindi: scheme.objectiveHindi || '',
          objectiveTamil: scheme.objectiveTamil || '',
          eligibility: Array.isArray(scheme.eligibility) ? scheme.eligibility : [],
          eligibilityHindi: Array.isArray(scheme.eligibilityHindi) ? scheme.eligibilityHindi : [],
          eligibilityTamil: Array.isArray(scheme.eligibilityTamil) ? scheme.eligibilityTamil : [],
          documentsRequired: Array.isArray(scheme.documentsRequired) ? scheme.documentsRequired : [],
          documentsRequiredHindi: Array.isArray(scheme.documentsRequiredHindi) ? scheme.documentsRequiredHindi : [],
          documentsRequiredTamil: Array.isArray(scheme.documentsRequiredTamil) ? scheme.documentsRequiredTamil : [],
          applicationProcedure: Array.isArray(scheme.applicationProcedure) ? scheme.applicationProcedure : [],
          applicationProcedureHindi: Array.isArray(scheme.applicationProcedureHindi) ? scheme.applicationProcedureHindi : [],
          applicationProcedureTamil: Array.isArray(scheme.applicationProcedureTamil) ? scheme.applicationProcedureTamil : [],
          benefits: scheme.benefits || '',
          benefitsHindi: scheme.benefitsHindi || '',
          benefitsTamil: scheme.benefitsTamil || '',
          deadline: scheme.deadline || 'Ongoing',
          deadlineHindi: scheme.deadlineHindi || '',
          deadlineTamil: scheme.deadlineTamil || '',
          contactInfo: scheme.contactInfo || '',
          contactInfoHindi: scheme.contactInfoHindi || '',
          contactInfoTamil: scheme.contactInfoTamil || '',
          website: scheme.website || '',
          source: scheme.source || 'Unknown',
          lastUpdated: new Date().toISOString(),
          tags: Array.isArray(scheme.tags) ? scheme.tags : []
        };
        
        cleaned.push(cleanedScheme);
      }
    });
    
    return cleaned;
  }

  /**
   * Save data to file
   */
  async saveDataToFile(schemes) {
    try {
      // Ensure data directory exists
      await fs.mkdir(this.dataDir, { recursive: true });
      
      // Save schemes data
      const schemesFile = path.join(this.dataDir, 'scraped_schemes.json');
      await fs.writeFile(schemesFile, JSON.stringify(schemes, null, 2));
      
      // Save metadata
      const metadata = {
        totalSchemes: schemes.length,
        lastUpdated: new Date().toISOString(),
        sources: [...new Set(schemes.map(s => s.source))],
        categories: [...new Set(schemes.map(s => s.category))]
      };
      
      const metadataFile = path.join(this.dataDir, 'scraping_metadata.json');
      await fs.writeFile(metadataFile, JSON.stringify(metadata, null, 2));
      
      console.log(`ЁЯТ╛ Data saved to ${schemesFile}`);
      console.log(`ЁЯУК Metadata saved to ${metadataFile}`);
      
    } catch (error) {
      console.error('тЭМ Error saving data to file:', error);
      throw error;
    }
  }

  /**
   * Load previously scraped data
   */
  async loadScrapedData() {
    try {
      const schemesFile = path.join(this.dataDir, 'scraped_schemes.json');
      const data = await fs.readFile(schemesFile, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.log('тЪая╕П No previously scraped data found');
      return [];
    }
  }

  /**
   * Get scraping statistics
   */
  async getScrapingStats() {
    try {
      const metadataFile = path.join(this.dataDir, 'scraping_metadata.json');
      const data = await fs.readFile(metadataFile, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      return {
        totalSchemes: 0,
        lastUpdated: null,
        sources: [],
        categories: []
      };
    }
  }
}

module.exports = GovernmentDataScraper;
